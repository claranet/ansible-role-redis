---
# defaults file for role

# enabled redis server
redis_server_enabled: true

# set an empty string to autodiscover master ip
redis_master_ip: ""

# redis_group: []
redis_group: "{{ groups.redis if groups.redis is defined else '' }}"

# version of redis to install
redis_server_version: latest

# user for service
redis_server_user: redis
redis_server_group: redis

# listening port
redis_server_port: 6379

# set redis log directory path
redis_server_logdir: /var/log/redis

# number of databases
redis_server_databases_number: 16

# path of databases files
redis_server_databases_dir: /var/lib/redis

# redis includes
redis_includes: {}

# redis modules
redis_modules: {}

# redis default configuration
redis_conf_default:
  bind: 0.0.0.0
  port: "{{ redis_server_port }}"
  supervised: "systemd"
  pidfile: "/var/run/redis/redis-server_{{ redis_server_port }}.pid"
  protected-mode: "{{ 'yes' if redis_server_password is defined else 'no' }}"
  requirepass: "{{ redis_server_password if redis_server_password is defined else '' }}"
  masterauth: "{{ redis_server_password if redis_server_password is defined and redis_role is defined else '' }}"
  save:  "900 1 300 100 60 10000"
  logfile: "{{ redis_server_logdir }}/redis-server_{{ redis_server_port }}.log"
  dbfilename: "{{ redis_server_port }}.dbf"
  dir: "{{ redis_server_databases_dir }}"
  replica-priority: "{{ '10' if redis_role is defined and redis_role == 'master' else '100' }}"
  maxmemory: "{{ [ansible_memtotal_mb * 1024 * 1024 - 1073741824, (ansible_memtotal_mb * 1024 * 1024 * 0.8) | int] | max }}"
  maxmemory-policy: "allkeys-lru"
  appendfilename: "{{ redis_server_port }}.aof"

# redis custom configuration
redis_conf: {}

# Sentinel

# enable sentinel feature for HA
redis_sentinel_enabled: false

# sentinel version to install
redis_sentinel_version: "{{ redis_server_version }}"

# listen address for sentinel
redis_sentinel_listen: 0.0.0.0

# port for listen address
redis_sentinel_port: 26379

# logdir path for sentinel
redis_sentinel_logdir: "{{ redis_server_logdir }}"

# sentinel logfile
redis_sentinel_logfile: "redis-sentinel_{{ redis_sentinel_port }}.log"

# sentinel database directory
redis_sentinel_databases_dir: "{{ redis_server_databases_dir }}"

# redis sentinel quorum
redis_sentinel_quorum: 2

# redis sentinel master name
redis_sentinel_master_name : "mymaster"

# redis sentinel downafter
redis_sentinel_downafter: 10000

# failover timeout
redis_sentinel_failover_timeout: 30000


# Sentinel config format : <key> <value>
redis_sentinel_conf_default:
  bind: "{{ redis_sentinel_listen }}"
  protected-mode: "no"
  port: "{{ redis_sentinel_port }}"
  daemonize: "yes"
  pidfile: '"/var/run/sentinel/redis-sentinel_{{ redis_sentinel_port }}.pid"'
  loglevel: "notice"
  logfile: '"{{ redis_sentinel_logdir }}/{{ redis_sentinel_logfile }}"'
  dir: '"{{ redis_sentinel_databases_dir }}"'

redis_sentinel_conf: {}
  # acllog-max-len: 128
  # requirepass: <password>
  # syslog-enabled: no
  # syslog-ident: sentinel
  # syslog-facility: local0


# Sentinel config format : sentinel <key> <value>
redis_sentinel_sentinel_conf_default:
  deny-scripts-reconfig: "yes"

redis_sentinel_sentinel_conf: {}
  # announce-ip: <ip>
  # announce-port: <port>
  # sentinel-user: <username>
  # sentinel-pass: <password>
  # resolve-hostnames: no
  # announce-hostnames: no


# Sentinel config format : sentinel <key> {{ redis_sentinel_master_name }} <value>
redis_sentinel_master_conf_default:
  monitor: "{{ _redis_master_ip }} {{ redis_server_port }} {{ redis_sentinel_quorum }}"
  down-after-milliseconds:  "{{ redis_sentinel_downafter }}"
  auth-pass:  "{{ redis_server_password if redis_server_password is defined else '' }}"
  failover-timeout: "{{ redis_sentinel_failover_timeout }}"

redis_sentinel_master_conf: {}
  # auth-user:  <username>
  # parallel-syncs: <val>
  # notification-script: /var/redis/notify.sh
  # client-reconfig-script: /var/redis/reconfig.sh
  # master-reboot-down-after-period: 0
