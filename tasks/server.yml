---
- name: Set overcommit_memory = 1
  ansible.posix.sysctl:
    name: vm.overcommit_memory
    value: "1"
    sysctl_file: /etc/sysctl.d/redis_ansible_role.conf
    sysctl_set: true
  tags: molecule-notest

- name: Server | Mask redis-server service
  ansible.builtin.systemd:
    name: redis-server.service
    masked: true

- name: Server | Create systemd unit file for redis
  ansible.builtin.template:
    src: etc/systemd/system/redis-server@.service.j2
    dest: "/etc/systemd/system/redis-server@{{ redis_server_port }}.service"
    owner: root
    group: root
    mode: 0440
  register: _redis_server_service

- name: Server | Delete default redis configuration file
  ansible.builtin.file:
    path: /etc/redis/redis.conf
    state: absent

- name: Server | Configure redis
  ansible.builtin.template:
    src: etc/redis/redis.conf.j2
    dest: /etc/redis/redis_{{ redis_server_port }}.conf
    mode: 0440
    owner: redis
    group: redis

- name: Server | Activate redis service
  ansible.builtin.systemd:
    name: redis-server@{{ redis_server_port }}.service
    masked: false
    enabled: true
    daemon_reload: "{{ _redis_server_service is changed }}"

- name: Server | Check service Redis is started
  ansible.builtin.systemd:
    name: redis-server@{{ redis_server_port }}.service
    state: started
  register: _redis_server_systemctl_start

- name: ensure redis conf is set with password
  community.general.redis:
    command: config
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    login_host: "{{ _redis_conf_final.bind }}"
    login_port: "{{ redis_server_port }}"
    login_password: "{{ redis_server_password }}"
  loop: "{{ _redis_conf_final | dict2items }}"
  when: redis_server_password is defined

- name: ensure redis conf is set without password
  community.general.redis:
    command: config
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    login_host: "{{ _redis_conf_final.bind }}"
    login_port: "{{ redis_server_port }}"
  loop: "{{ _redis_conf_final | dict2items }}"
  when: redis_server_password is not defined

- name: get databases parameters
  ansible.builtin.shell: >-
    redis-cli -p {{ redis_server_port }} -h {{ _redis_conf_final.bind }} {% if redis_server_password is defined %} -a {{ redis_server_password }} {% endif %} config get databases | tail -1
  register: immutable
  changed_when: false

- name: require restart if databases changed
  ansible.builtin.assert:
    that: immutable.stdout | int != redis_server_databases_number | int
  changed_when: true
  notify: Redis-server restart
  when: immutable.stdout | int != redis_server_databases_number | int
